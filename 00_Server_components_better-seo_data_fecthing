Next JS Server Components, Suspense, and Fallback  to Improve SEO
_____________________________________________________________________


Server Components are rendered on the server at request time. The server fetches the data dynamically whenever the page is requested, so you can have dynamic content and avoid sending unnecessary JavaScript to the client.


src/app/users/user.tsx-

import React from 'react'

const fetchData = async () =>{
    const data =await  fetch('https://jsonplaceholder.typicode.com/users/1')
    return data.json();
}


export const User = async () =>{
    // added a Tim out for 5 seconds to delay response and mimic api time
    const promise = await new Promise(resolve => setTimeout(() => resolve("forcing to wait for 5 secomds"), 5000))
    console.log(promise)
    const userData = await fetchData();

    return(
        <>
        Username: {userData.name}
        <br />
        UserEmail: {userData.email}
        </>
    )
}


________________________________________________

Src/app/users/page.tsx-

import React, {Suspense} from "react";
import { User } from "./user";

const Users = () =>{
    return(
        <>
        we have the User details below:
        <br />
        <Suspense fallback={<p>Loading user details.....</p>} >
        <User />
        </Suspense>
        </>
    )
}

export default Users;
_____________________________________________


 How It Works:
* User Component: The User component is a Server Component that fetches data from the API and renders it. The data is fetched on the server during the initial request.
* Suspense: Suspense is used in the main Page component(page.tsx) to wrap the User component. This tells React to "suspend" rendering of the User component while the data is being fetched.
* Fallback UI: The Suspense component takes a fallback prop that renders a loading state (in this case, "Loading user data...") until the User component finishes fetching and rendering.
Behavior:
* When you load the page, the User component will wait for the server to fetch the user data.
* While the data is being fetched, the "Loading user data..." fallback text will be shown.
* Once the data is ready, the User component will render, showing the user’s information.

________________________________________________

SEO Advantages of This Setup:
1. Server-Side Rendering: The User content will be rendered on the server and sent as fully-formed HTML to the client, making it indexable by search engines immediately.
2. Fallback: While the data is being fetched (especially if it takes time), a loading message or spinner is displayed to the user. React Suspense helps ensure that users get a smooth experience while the page is loading, reducing the chance of high bounce rates, which is a key SEO ranking factor.
3. No JavaScript Dependency: Search engines don’t have to rely on JavaScript execution to load the content. Fully-rendered HTML from the server will be crawled and indexed, improving the chances of better ranking.


